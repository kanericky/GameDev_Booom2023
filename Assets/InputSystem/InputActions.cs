//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""14c91da6-3aa6-4d77-bce6-ca0b0edbc462"",
            ""actions"": [
                {
                    ""name"": ""ReloadPressed"",
                    ""type"": ""Button"",
                    ""id"": ""96afdf60-cb56-4162-861c-5b3c7acde56e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimPressed"",
                    ""type"": ""Button"",
                    ""id"": ""df90fb9c-ddb2-48b3-8a93-50b99fbd9eea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""d48cb071-527d-44c3-8d0d-071fa604236e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadSelectionA"",
                    ""type"": ""Button"",
                    ""id"": ""fa50371e-d85f-4e5e-a25e-2471caf838e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadSelectionB"",
                    ""type"": ""Button"",
                    ""id"": ""a180aaf2-a7d0-4832-b2de-6048f3e6dd62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadSelectionC"",
                    ""type"": ""Button"",
                    ""id"": ""d6d27832-a72b-4c15-ab9f-12651daa7370"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadSelectionD"",
                    ""type"": ""Button"",
                    ""id"": ""a5508c6a-3ead-4882-94af-4d1f5e2e931c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelReload"",
                    ""type"": ""Button"",
                    ""id"": ""51346392-87e0-417b-8536-29b69b41f24b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll Left"",
                    ""type"": ""Button"",
                    ""id"": ""678764c6-a870-4313-9ce6-284a570fbc4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll Right"",
                    ""type"": ""Button"",
                    ""id"": ""56130a36-6740-409e-8c67-7f20ddc0c394"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2536c8b3-81c5-4817-9c75-4427ca8e7a7a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24980406-33f7-4009-bb82-5ab4a831e1cd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de3cc723-2c72-4c86-9ef4-ac961925c177"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0154988e-7c6a-4e58-bc6c-31d5f0f7162b"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadSelectionA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f98c5363-e137-4d64-b67c-24638797fcea"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadSelectionB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b365c31-2d24-4271-9d5c-902960107d3c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadSelectionC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e72e98b-db6c-4e48-bfd7-866c86053f40"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadSelectionD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4619cc5f-5b02-47f4-8377-96be3bc2e510"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd1bd0bc-8bb4-4bfd-8bc8-9ace36dc2166"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b9d6014-7165-4d7f-9cba-6881c46f72f4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""2e29e631-daf1-4e01-ac96-38d5ae2191d9"",
            ""actions"": [
                {
                    ""name"": ""Start Game"",
                    ""type"": ""Button"",
                    ""id"": ""f63e3a3b-e054-4278-a153-a38e21469e77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d91ebd5b-5118-4942-8e41-44f7583870ac"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ReloadPressed = m_Player.FindAction("ReloadPressed", throwIfNotFound: true);
        m_Player_AimPressed = m_Player.FindAction("AimPressed", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_ReloadSelectionA = m_Player.FindAction("ReloadSelectionA", throwIfNotFound: true);
        m_Player_ReloadSelectionB = m_Player.FindAction("ReloadSelectionB", throwIfNotFound: true);
        m_Player_ReloadSelectionC = m_Player.FindAction("ReloadSelectionC", throwIfNotFound: true);
        m_Player_ReloadSelectionD = m_Player.FindAction("ReloadSelectionD", throwIfNotFound: true);
        m_Player_CancelReload = m_Player.FindAction("CancelReload", throwIfNotFound: true);
        m_Player_RollLeft = m_Player.FindAction("Roll Left", throwIfNotFound: true);
        m_Player_RollRight = m_Player.FindAction("Roll Right", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_StartGame = m_Menu.FindAction("Start Game", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_ReloadPressed;
    private readonly InputAction m_Player_AimPressed;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_ReloadSelectionA;
    private readonly InputAction m_Player_ReloadSelectionB;
    private readonly InputAction m_Player_ReloadSelectionC;
    private readonly InputAction m_Player_ReloadSelectionD;
    private readonly InputAction m_Player_CancelReload;
    private readonly InputAction m_Player_RollLeft;
    private readonly InputAction m_Player_RollRight;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ReloadPressed => m_Wrapper.m_Player_ReloadPressed;
        public InputAction @AimPressed => m_Wrapper.m_Player_AimPressed;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @ReloadSelectionA => m_Wrapper.m_Player_ReloadSelectionA;
        public InputAction @ReloadSelectionB => m_Wrapper.m_Player_ReloadSelectionB;
        public InputAction @ReloadSelectionC => m_Wrapper.m_Player_ReloadSelectionC;
        public InputAction @ReloadSelectionD => m_Wrapper.m_Player_ReloadSelectionD;
        public InputAction @CancelReload => m_Wrapper.m_Player_CancelReload;
        public InputAction @RollLeft => m_Wrapper.m_Player_RollLeft;
        public InputAction @RollRight => m_Wrapper.m_Player_RollRight;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @ReloadPressed.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadPressed;
                @ReloadPressed.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadPressed;
                @ReloadPressed.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadPressed;
                @AimPressed.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAimPressed;
                @AimPressed.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAimPressed;
                @AimPressed.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAimPressed;
                @Fire.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @ReloadSelectionA.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionA;
                @ReloadSelectionA.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionA;
                @ReloadSelectionA.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionA;
                @ReloadSelectionB.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionB;
                @ReloadSelectionB.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionB;
                @ReloadSelectionB.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionB;
                @ReloadSelectionC.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionC;
                @ReloadSelectionC.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionC;
                @ReloadSelectionC.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionC;
                @ReloadSelectionD.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionD;
                @ReloadSelectionD.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionD;
                @ReloadSelectionD.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadSelectionD;
                @CancelReload.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCancelReload;
                @CancelReload.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCancelReload;
                @CancelReload.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCancelReload;
                @RollLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRollLeft;
                @RollLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRollLeft;
                @RollLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRollLeft;
                @RollRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRollRight;
                @RollRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRollRight;
                @RollRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRollRight;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ReloadPressed.started += instance.OnReloadPressed;
                @ReloadPressed.performed += instance.OnReloadPressed;
                @ReloadPressed.canceled += instance.OnReloadPressed;
                @AimPressed.started += instance.OnAimPressed;
                @AimPressed.performed += instance.OnAimPressed;
                @AimPressed.canceled += instance.OnAimPressed;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @ReloadSelectionA.started += instance.OnReloadSelectionA;
                @ReloadSelectionA.performed += instance.OnReloadSelectionA;
                @ReloadSelectionA.canceled += instance.OnReloadSelectionA;
                @ReloadSelectionB.started += instance.OnReloadSelectionB;
                @ReloadSelectionB.performed += instance.OnReloadSelectionB;
                @ReloadSelectionB.canceled += instance.OnReloadSelectionB;
                @ReloadSelectionC.started += instance.OnReloadSelectionC;
                @ReloadSelectionC.performed += instance.OnReloadSelectionC;
                @ReloadSelectionC.canceled += instance.OnReloadSelectionC;
                @ReloadSelectionD.started += instance.OnReloadSelectionD;
                @ReloadSelectionD.performed += instance.OnReloadSelectionD;
                @ReloadSelectionD.canceled += instance.OnReloadSelectionD;
                @CancelReload.started += instance.OnCancelReload;
                @CancelReload.performed += instance.OnCancelReload;
                @CancelReload.canceled += instance.OnCancelReload;
                @RollLeft.started += instance.OnRollLeft;
                @RollLeft.performed += instance.OnRollLeft;
                @RollLeft.canceled += instance.OnRollLeft;
                @RollRight.started += instance.OnRollRight;
                @RollRight.performed += instance.OnRollRight;
                @RollRight.canceled += instance.OnRollRight;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_StartGame;
    public struct MenuActions
    {
        private @InputActions m_Wrapper;
        public MenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_Menu_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @StartGame.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IPlayerActions
    {
        void OnReloadPressed(InputAction.CallbackContext context);
        void OnAimPressed(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnReloadSelectionA(InputAction.CallbackContext context);
        void OnReloadSelectionB(InputAction.CallbackContext context);
        void OnReloadSelectionC(InputAction.CallbackContext context);
        void OnReloadSelectionD(InputAction.CallbackContext context);
        void OnCancelReload(InputAction.CallbackContext context);
        void OnRollLeft(InputAction.CallbackContext context);
        void OnRollRight(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
}
